{% if settings.cart_type == 'drawer' %}

 
  <div id="CartDrawer" class="drawer drawer--right">
    <form id="CartDrawerForm" action="{{ routes.cart_url }}" method="post" novalidate class="drawer__contents" data-location="cart-drawer">
      <div class="drawer__fixed-header">
        <div class="drawer__header appear-animation appear-delay-1">
          <div class="drawer__title">{{ 'cart.general.title' | t }} (<span class="cart__item__count">{{ cart.item_count }}</span>)</div>
          {% comment %} <div class="drawer__close">
            <button type="button" class="drawer__close-button js-drawer-close">
              <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-close" viewBox="0 0 64 64"><title>icon-X</title><path d="m19 17.61 27.12 27.13m0-27.12L19 44.74"/></svg>
              <span class="icon__fallback-text">{{ 'cart.general.close_cart' | t }}</span>
            </button>
          </div> {% endcomment %}
          <button type="button" class="drawer__close-button js-drawer-close">
            <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-close" viewBox="0 0 64 64"><title>icon-X</title><path d="m19 17.61 27.12 27.13m0-27.12L19 44.74"/></svg>
            <span class="icon__fallback-text">{{ 'cart.general.close_cart' | t }}</span>
          </button>
        </div>
      </div>

      <div class="drawer__inner">
        <div class="drawer__scrollable">
          <div data-products class="appear-animation appear-delay-2"></div>

          {% if settings.cart_notes_enable %}
            <div class="appear-animation appear-delay-3">
              <label for="CartNoteDrawer">{{ 'cart.general.note' | t }}</label>
              <textarea name="note" class="input-full cart-notes" id="CartNoteDrawer">{{ cart.note }}</textarea>
            </div>
          {% endif %}
        </div>

        <div class="drawer__footer appear-animation appear-delay-4">
          <div data-discounts>
            {% if cart.cart_level_discount_applications != blank %}
              <div class="cart__item-sub cart__item-row">
                <div>{{ 'cart.general.discounts' | t }}</div>
                <div class="text-right">
                  {% for cart_discount in cart.cart_level_discount_applications %}
                    <div>
                      {{ cart_discount.title }} (-{{ cart_discount.total_allocated_amount | money }})
                    </div>
                  {% endfor %}
                </div>
              </div>
            {% endif %}
          </div>

          <div class="cart__item-sub cart__item-row">
            <div class="cart__subtotal">{{ 'cart.general.subtotal' | t }}</div>
            <div data-subtotal>{{ cart.total_price | money }}</div>
          </div>

          <div class="cart__item-row cart__savings text-center hide" data-savings></div>

          {% comment %} <div class="cart__item-row text-center ajaxcart__note">
            <small>
              {{ 'cart.general.shipping_at_checkout' | t }}<br />
            </small>
          </div> {% endcomment %}

          {% if settings.cart_terms_conditions_enable %}
            <div class="cart__item-row cart__terms">
              <input type="checkbox" id="CartTermsDrawer" class="cart__terms-checkbox">
              <label for="CartTermsDrawer">
                {% if settings.cart_terms_conditions_page != blank %}
                  {{ 'cart.general.terms_html' | t: url: settings.cart_terms_conditions_page.url }}
                {% else %}
                  {{ 'cart.general.terms' | t }}
                {% endif %}
              </label>
            </div>
          {% endif %}

          
          <div class="cart__checkout-wrapper">
            {% if settings.cart_protection_product %}
              {% assign protection_product = all_products["shipping-protection"] %}
              <div class="package-protection-row" data-bind>
                <div class="icon">
                  {%- if protection_product.featured_image != blank -%}
                  <img class="lazyload" src="{{ protection_product.featured_image | img_url: '45x' }}">
                  {%- else -%}
                  {% comment %} <img class="lazyload" src="{{ section.settings.protection_product_icon | img_url: '45x' }}"> {% endcomment %}
                  {%- endif -%}
                </div>
                <div class="description">
                  <p class="title">{{ protection_product.title }} 
                    {%- if section.settings.popup_info != blank -%}
                    <a href="javascript:void(0)" aria-label="View Details" id="pp_info">{% include 'icon-information' %}</a>
                    {%- endif -%}
                  </p>
                  <p class="info" data-protectedproduct>{{protection_product.price | money }}</p>
                </div>
                {% comment %} <div class="toggle">
                  <input type="checkbox" name="package-protection-enable" 
                          data-product-id="{{ protection_product.id }}" 
                          data-variant-id="{{ protection_product.selected_or_first_available_variant.id }}"
                          class="package-protection-checkbox">
                  <span class="toggler-checkbox"></span>
                </div> {% endcomment %}
                <label class="hs-switch toggler-checkbox">
                  <input id="hs-shipping-chk-id"
                        data-product-id="{{ protection_product.id }}" 
                        data-variant-id="{{ protection_product.selected_or_first_available_variant.id }}"
                        class="hs-shipping-chk hs-event-static package-protection-checkbox" 
                        type="checkbox">
                  <span class="hs-shipping-slider hs-shipping-round"> </span>
                  <span class="hs-hidden-compare">Toogle</span>
                </label>
              </div>
            {% endif %}
            
            <button type="submit" name="checkout" data-terms-required="{{ settings.cart_terms_conditions_enable }}" class="btn cart__checkout">
              {{ 'cart.general.checkout' | t }}
            </button>

            {% if additional_checkout_buttons and settings.cart_additional_buttons %}
              <div class="additional-checkout-buttons additional-checkout-buttons--vertical">{{ content_for_additional_checkout_buttons }}</div>
            {% endif %}
          </div>
        </div>
      </div>

      <div class="drawer__cart-empty appear-animation appear-delay-2">
        <div class="drawer__scrollable">
          {{ 'cart.general.empty' | t }}
        </div>
      </div>
    </form>
  </div>
{% endif %}

<style>
.hs-switch {
  position: absolute;
  right: 0;
  top: 0;
  display: inline-block;
  width: 60px;
  height: 24px;
}
.hs-switch .hs-shipping-chk {
    opacity: 0;
    width: 0;
    height: 0;
}
.hs-site-cart-popup-layout *:empty {
    display: block;
}
.hs-shipping-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
}
.hs-shipping-slider:not(.hs-active) {
    background-color: #ccc;
    -webkit-transition: .4s;
    transition: .4s;
}
.hs-shipping-slider.hs-shipping-round {
    border-radius: 34px;
}
input.hs-shipping-chk + .hs-shipping-slider {
    background-color: #ccc;
}
.hs-shipping-slider:before {
    position: absolute;
    content: "";
    height: 20px;
    width: 20px;
    left: 4px;
    bottom: 2px;
    background-color: white;
    -webkit-transition: .4s;
    transition: .4s;
}
.hs-site-cart-popup-layout span:after {
    content: '' !important;
}
.hs-shipping-slider.hs-shipping-round:before {
    border-radius: 50%;
}
.hs-select-box-load.hs-hidden-select---variants, .hs-hidden-compare {
    display: none !important;
}
input.hs-shipping-chk.hs-active + .hs-shipping-slider.hs-active {
    background-color: #008060;
}
input.hs-shipping-chk.hs-active + .hs-shipping-slider.hs-active:before {
    transform: translateX(32px);
}
</style>
<script>
  
  function addItemToCart(variant_id, qty) {
    var data = {
      "id": variant_id,
      "quantity": qty,
    }
    jQuery.ajax({
      type: 'POST',
      url: '/cart/add.js',
      data: data,
      dataType: 'json',
      success: function(res) { 
        cart_ajax();
      }
    });
  }
  
  function removeItemFromCart(variant_id, qty) {
    var data = {
      "id": variant_id,
      "quantity": qty,
    }
    
    jQuery.ajax({
      type: 'POST',
      url: '/cart/change.js',
      data: data,
      dataType: 'json',
      success: function(res) { 
        cart_ajax();
      }
    });
  }
  
  function check_cart_for_package_protection(variant_id) {
    jQuery.ajax({
      type: 'GET',
      url: '/cart.json',
      dataType: 'json',
      success: function(data) { 
        
        let items = data.items;
        let found_package_in_cart = false;
        
        for(var i=0; i < items.length; i++){
          var line_item_id = items[i].id;
          if(line_item_id == variant_id){
            found_package_in_cart = true;
          }
        }
        if( found_package_in_cart ){
          jQuery('.hs-switch .hs-shipping-chk').addClass('hs-active');
          jQuery('.hs-switch .hs-shipping-slider').addClass('hs-active');
          jQuery('.package-protection-checkbox').prop("checked", true);
        }
      }
    });
  }

  // Add event listeners to the remove buttons
  jQuery(document).on('click', '.cart__item--remove', function() {
    const key = jQuery(this).data('key');
    let variant_id = key.split(':')[0];

    updateCartItem(variant_id, 0);
  });

  jQuery(document).on('click', '.js-qty__adjust--minus', function() {
    const key = jQuery(this).data('key');
    let variant_id = key.split(':')[0];
    const quantity = jQuery(this).data('quantity') - 1;
    if (quantity >= 0) {
      updateCartItem(variant_id, quantity);
    }
  });

  jQuery(document).on('click', '.js-qty__adjust--plus', function() {
    const key = jQuery(this).data('key');
    let variant_id = key.split(':')[0];
    const quantity = jQuery(this).data('quantity') + 1;
    updateCartItem(variant_id, quantity);
  });
  
  function updateCartItem(key, quantity) {
    fetch(`/cart/change.js`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        id: key,
        quantity: quantity
      })
    })
    .then(response => response.json())
    .then((cart) => {
      cart_ajax();
    })
    .catch((error) => {
      console.error('Error updating item in cart:', error);
    });
  }

  function cart_ajax() {
    fetch('/cart?view=ajax')
      .then(response => response.text())
      .then((responseText) => {
        const parser = new DOMParser();
        const content = parser.parseFromString(responseText, 'text/html');

        // Get the new cart items from AJAX response
        const newCartItems = content.querySelector('.cart__items');
        
        // Check if we're on cart page or cart drawer
        const isCartPage = document.querySelector('[data-products]') !== null;
        const isCartDrawer = document.querySelector('.cart__items') !== null;
        
        if (newCartItems) {
          // Handle cart drawer
          if (isCartDrawer) {
            const oldCartItems = document.querySelector('.cart__items');
            if (oldCartItems) {
              oldCartItems.parentElement.replaceChild(newCartItems, oldCartItems);
            }
          }
          
          // Handle cart page - update data-products container
          if (isCartPage) {
            const cartPageContainer = document.querySelector('[data-products]');
            if (cartPageContainer) {
              cartPageContainer.innerHTML = newCartItems.innerHTML;
            }
          }

          // Add classes to the new cart item images
          const cartItemImages = isCartPage ? 
            document.querySelectorAll('[data-products] .cart__item--image') : 
            newCartItems.querySelectorAll('.cart__item--image');
            
          cartItemImages.forEach((item) => {
            item.classList.add('aos-init', 'aos-animate');
          });

          // Handle the subtotal and count
          let price = newCartItems.dataset.cartSubtotal;
          let count = newCartItems.dataset.count;
          let item_count = count;
          const protectedCartItem = newCartItems.querySelector('[data-key*="40773956370583"]');
          if (protectedCartItem) {
            count = count ? parseInt(count, 10) - 1 : 0;
          }

          if (price) {
            let number = Number(price) / 100;
            let formattedCurrency = new Intl.NumberFormat('en-US', {
              style: 'currency',
              currency: 'USD'
            }).format(number);
            const subtotalElement = document.querySelector('[data-subtotal]');
            if (subtotalElement) {
              subtotalElement.innerHTML = formattedCurrency;
            }
          }

          if (count !== undefined) {
            const countElement = document.querySelector('.cart__item__count');
            if (countElement) {
              countElement.innerHTML = count;
            }
          }

          // Handle empty cart
          if (item_count === '0') {
            if (isCartPage) {
              // For cart page, reload to show empty cart state
              window.location.reload();
            } else if (isCartDrawer) {
              // For cart drawer, handle empty state
              const appearElement = document.querySelector('.appear-animation.appear-delay-2');
              if (appearElement) {
                appearElement.classList.add('drawer__cart-empty');
              }
              
              const cartItemsElement = document.querySelector('.cart__items');
              if (cartItemsElement) {
                cartItemsElement.innerHTML = '{{ "cart.general.empty" | t }}';
              }
              
              const drawerFooter = document.querySelector('.drawer__footer');
              if (drawerFooter) {
                drawerFooter.innerHTML = '';
              }
            }
            
            // Common empty cart actions
            jQuery('.hs-switch .hs-shipping-chk').removeClass('hs-active');
            jQuery('.hs-switch .hs-shipping-slider').removeClass('hs-active');
            jQuery('.package-protection-checkbox').prop("checked", false);
            
            const cartBubble = document.querySelector('.cart-link__bubble');
            if (cartBubble) {
              cartBubble.style.display = 'none';
            }
          }

          if (item_count === '1' && protectedCartItem) {
            jQuery('.hs-switch .hs-shipping-chk').removeClass('hs-active');
            jQuery('.hs-switch .hs-shipping-slider').removeClass('hs-active');
            jQuery('.package-protection-checkbox').prop("checked", false);
            updateCartItem("40773956370583", 0);
          }
        } else {
          // If no cart items found in response, reload page
          window.location.reload();
        }
      })
      .catch((error) => {
        console.error('Error fetching cart AJAX:', error);
      });
  }

  jQuery(document).ready(function ($) {
    var pp_variant_id = jQuery('.package-protection-checkbox').attr('data-variant-id');
    
    if(pp_variant_id){
      check_cart_for_package_protection(pp_variant_id);
    }
    
    jQuery('#pp_info').on('click', function (e) {
      e.preventDefault();
      jQuery('.info-modal').fadeIn();
    });
    
    jQuery('[data-dismiss="modal"]').on('click', function(e){
      e.preventDefault();
      jQuery('.info-modal').fadeOut();
    });
    
    jQuery('.toggler-checkbox').click(function(e){
      e.preventDefault();
      if(jQuery('.package-protection-checkbox').is(':checked')){
        jQuery('.hs-switch .hs-shipping-chk').removeClass('hs-active');
        jQuery('.hs-switch .hs-shipping-slider').removeClass('hs-active');
        jQuery('.package-protection-checkbox').prop("checked", false);

        if(pp_variant_id){
          // Remove Package Product From Cart
          removeItemFromCart(pp_variant_id, 0);
        }

      } else {
        jQuery('.hs-switch .hs-shipping-chk').addClass('hs-active');
        jQuery('.hs-switch .hs-shipping-slider').addClass('hs-active');
        jQuery('.package-protection-checkbox').prop("checked", true); 

        if(pp_variant_id){
          // Add Package Product to Cart
          addItemToCart(pp_variant_id, 1);
        }
      }
    });
  });
</script>
<style>
.hs-site-cart-popup-layout{
            background: #fff !important;
        }
        .hs-content-additional-buttons{
            display: block !important;
        }
        .hs-content-additional-buttons .shopify-cleanslate{
            
        }
        .hs-body-layout{
            flex: none !important;
            max-height: calc(100% - 295px) !important;
        }
        .hs-footer-layout.empty{
            display: none !important;
        }
        @media (max-width:1000px){

        }
    .hs-shipping-slider.hs-active:before {
    right: 3px !important;
    left: -13px !important;
}
  .hs-shipping-slider:before {
 
    top: 1px !important;
    
}
</style>
              
 